
@BaseClass = BaseProperties_squidgame
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// RlGlMapController
//
@PointClass base(BaseProperties_squidgame) 
metadata
{
	entity_tool_name = "Logic RlGl"
	entity_tool_group = "Logic"
	entity_tool_tip = "Get event calls to change states on the map"
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= logic_rlgl : "Logic entity for the RlGl Gamemode"
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input OpenTheRoof(void) : "This will open the roof on the RlGl Map, usually before the beginning of the Game"
	input CloseTheRoof(void) : "This will close the roof on the RlGl Map, usually at the end of the Game"

	output OpenRoof(void) : ""
	output CloseRoof(void) : ""
]

//
// SgSp
//
@PointClass base(BaseProperties_squidgame) drawangles() 
metadata
{
	entity_tool_name = "Squid Game Spawnpoint"
	entity_tool_group = "Player"
	entity_tool_tip = "Defines a point where a defined entity can (re)spawn"
}
= info_sg_spawn : "Spawnpoint for squid game games"
[
	type(choices) : "SpawnPoint Type" : 0 : "" =
	[
		0 : "PLAYER"
		1 : "SUPERVISOR"
		2 : "GUNNER"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// GameTimer
//
@PointClass base(BaseProperties_squidgame) drawangles() iconsprite( "editor/snd_event.vmat" ) 
metadata
{
	entity_tool_name = "Game Timer"
	entity_tool_group = "Effects"
	entity_tool_tip = "Spawns a Panel with a Timer/Countdown"
}
= info_gametimer : "Spawnpoint for Timer"
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// SquidGame.OriginSandbox.Fists
//
@PointClass base(BaseProperties_squidgame) = weapon_fists : ""
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// SquidGame.Entities.RlGlDoll
//
@PointClass base(BaseProperties_squidgame) drawangles() model() 
metadata
{
	entity_tool_name = "Doll"
	entity_tool_group = "RLGL"
	entity_tool_tip = "Sets the doll position for the rlgl game"
}
= sg_rlgl_doll : "Red light green light doll"
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	collisiongroupoverride(choices) : "Collision Group Override" : -1 : "" =
	[
		-1 : "UNUSED"
		0 : "COLLISION GROUP ALWAYS"
		1 : "COLLISION GROUP NONPHYSICAL"
		4 : "COLLISION GROUP DEFAULT"
		5 : "COLLISION GROUP DEBRIS"
		14 : "COLLISION GROUP WEAPON"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// SquidGame.Entities.Zone
//
@SolidClass base(BaseProperties_squidgame) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= sg_zone : ""
[
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

